version: 3
tasks:
    api:
        desc: generating http handlers
        sources:
            -  api/post-forwarder.yaml
        generates:
            - internal/post-forwarder/driver/openapi_gen.go
        cmds:
            - oapi-codegen -old-config-style -generate types,server -o "internal/post-forwarder/driver/openapi_gen.go" -package "driver" "api/post-forwarder.yaml"
    mocks:
        desc: generating mocks
        sources:
            - interfaces.go
        generates:
            - mocks/*.go
        dir: "internal/post-forwarder/domain"
        cmds:
            - mockery --name ApplicationInterface
            - mockery --name Notifier
            - mockery --name MessageStorage
    test:
        desc: running tests
        dir: "internal/"
        deps:
            - decorate
            - mocks
        cmds:
            - go test -cover -v ./...
    lint:
        desc: running linter
        dir: "internal/"
        cmds:
            - golangci-lint run
    decorate-handlers:
        deps:
            - api
        desc: decorate handlers
        dir: "internal/post-forwarder/driver"
        sources:
            - openapi_gen.go
        generates:
            - open_api_zap_gen.go
            - open_api_sentry_gen.go
        cmds:
            - gowrap gen -i ServerInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/echo-sentry.gotmpl -o open_api_sentry_gen.go
    decorate:
        desc: decorate interfaces
        deps:
            - decorate-handlers
        dir: "internal/post-forwarder/domain"
        sources:
            - interfaces.go
        generates:
            - wrappers/*.go
        cmds:
            - gowrap gen -i ApplicationInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl  -o wrappers/ApplicationInterfaceWithSentry.go
            - gowrap gen -i Notifier -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl  -o wrappers/NotifierWithSentry.go
            - gowrap gen -i MessageStorage -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl  -o wrappers/MessageStorageWithSentry.go
    deploy:
        desc: Deploy to gcp
        cmds:
            - doppler secrets substitute --config prd app-secrets.yaml.gotmpl >app-secrets.yaml
            - gcloud app deploy --quiet
    namespace:
        desc: create new namespace in kubernetes
        cmds:
            - kubectl apply -f k8s/namespace.yaml
    secrets:
        desc: create  kubernetes secrets
        deps:
            - namespace
        cmds:
            - kubectl apply -f k8s/secrets.yaml
    run:
        desc: run app locally in kubernetes
        deps:
            - decorate
            - secrets
        cmds:
            - skaffold run
    dev:
        desc: run app locally in kubernetes with auto build when code is changed
        deps:
            - decorate
            - secrets
        cmds:
            - skaffold dev --tail
    stop:
        desc: stop app running locally
        cmds:
            - kubectl delete -f k8s/deployment.yaml
            - kubectl delete -f k8s/namespace.yaml
    logs:
        desc: Show logs
        cmds:
            - gcloud app logs tail
    inf:
        desc: Pulumi Up
        dir: "inf"
        cmds:
            - pulumi up
    inf-y:
        desc: Pulumi Up -y
        dir: "inf"
        cmds:
            - pulumi up -y
    inf-show:
        desc: Show pulumi stack
        dir: "inf"
        cmds:
            - pulumi stack output --show-secrets
    registry:
        desc: Run registry locally
        cmds:
            - docker run -d -p 5000:5000 --restart=always --name registry registry:2
            - skaffold config set default-repo localhost:5000
    send-test-string:
        desc: Send test string
        cmds:
            - doppler run --config dev --command 'http GET "http://localhost:8080/api/${AUTH_TOKEN}/test?msg=<b>test</b>" --raw="test<br>body"'
    send-test-long-string:
        desc: Send test string
        cmds:
            - | 
              doppler run --config dev --command 'http GET "http://localhost:8080/api/${AUTH_TOKEN}/test" --raw="name,email,address,postalZip,region,country,numberrange \
                Kimberly Alford,rutrum@protonmail.ca,472-8909 Eu St.,00645,Vlaams-Brabant,France,0 \
                Katelyn Barnes,nisl.elementum@outlook.couk,Ap #394-9814 At St.,662588,Namen,Indonesia,3 \
                Adara Myers,eget@icloud.net,Ap #843-9905 Eu Street,71629,CÃ³rdoba,Canada,2 \
                Megan Weaver,eros.proin@protonmail.com,Ap #694-2065 Ipsum. Av.,830536,Sicilia,South Korea,2 \
                Zia Boyer,justo@google.com,Ap #111-2695 Eget St.,38338,Ancash,South Africa,6 \
                "'
    purge-old-versions:
        desc: Delete old versions of service in gcp
        cmds:
            - |
                VERSIONS=$(gcloud app versions list --service default --sort-by '~VERSION.ID' --format 'value(VERSION.ID)' | sed 1,3d)
                for version in $VERSIONS
                    do gcloud app versions delete "$version" --service default --quiet
                done
    list-buckets:
        desc: List app engine buckets with lifecycle rules
        dir: "inf"
        cmds:
            - |
              filter="$(pulumi stack output "app id").appspot.com"  
              for gs in $(gsutil ls | grep $filter); do
                echo -n "${gs}: "
                gsutil lifecycle get ${gs}
              done
    doppler:
        desc: install and setup doppler
        cmds:
            - kubectl apply -f https://github.com/DopplerHQ/kubernetes-operator/releases/latest/download/recommended.yaml
            - kubectl create secret generic doppler-token-secret --namespace doppler-operator-system --from-literal=serviceToken=$(doppler configs tokens create doppler-kubernetes-operator --plain --config dev)


