// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mocks

import (
	"context"
	"time"

	mock "github.com/stretchr/testify/mock"
)

// NewMessageStorage creates a new instance of MessageStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageStorage {
	mock := &MessageStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MessageStorage is an autogenerated mock type for the MessageStorage type
type MessageStorage struct {
	mock.Mock
}

type MessageStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageStorage) EXPECT() *MessageStorage_Expecter {
	return &MessageStorage_Expecter{mock: &_m.Mock}
}

// Read provides a mock function for the type MessageStorage
func (_mock *MessageStorage) Read(ctx context.Context, id string) (string, time.Time, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, time.Time, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) time.Time); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Get(1).(time.Time)
	}
	if returnFunc, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = returnFunc(ctx, id)
	} else {
		r2 = ret.Error(2)
	}
	return r0, r1, r2
}

// MessageStorage_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type MessageStorage_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MessageStorage_Expecter) Read(ctx interface{}, id interface{}) *MessageStorage_Read_Call {
	return &MessageStorage_Read_Call{Call: _e.mock.On("Read", ctx, id)}
}

func (_c *MessageStorage_Read_Call) Run(run func(ctx context.Context, id string)) *MessageStorage_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MessageStorage_Read_Call) Return(msg string, createdAt time.Time, err error) *MessageStorage_Read_Call {
	_c.Call.Return(msg, createdAt, err)
	return _c
}

func (_c *MessageStorage_Read_Call) RunAndReturn(run func(ctx context.Context, id string) (string, time.Time, error)) *MessageStorage_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function for the type MessageStorage
func (_mock *MessageStorage) Store(ctx context.Context, msg string) (string, error) {
	ret := _mock.Called(ctx, msg)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return returnFunc(ctx, msg)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = returnFunc(ctx, msg)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MessageStorage_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type MessageStorage_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx
//   - msg
func (_e *MessageStorage_Expecter) Store(ctx interface{}, msg interface{}) *MessageStorage_Store_Call {
	return &MessageStorage_Store_Call{Call: _e.mock.On("Store", ctx, msg)}
}

func (_c *MessageStorage_Store_Call) Run(run func(ctx context.Context, msg string)) *MessageStorage_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MessageStorage_Store_Call) Return(id string, err error) *MessageStorage_Store_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *MessageStorage_Store_Call) RunAndReturn(run func(ctx context.Context, msg string) (string, error)) *MessageStorage_Store_Call {
	_c.Call.Return(run)
	return _c
}
