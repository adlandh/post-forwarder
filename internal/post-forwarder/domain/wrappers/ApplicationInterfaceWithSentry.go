// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

//go:generate gowrap gen -p github.com/adlandh/post-forwarder/internal/post-forwarder/domain -i ApplicationInterface -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl -o ApplicationInterfaceWithSentry.go -l ""

import (
	"context"

	helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
	"github.com/adlandh/post-forwarder/internal/post-forwarder/domain"
	"github.com/getsentry/sentry-go"
)

// ApplicationInterfaceWithSentry implements domain.ApplicationInterface interface instrumented with opentracing spans
type ApplicationInterfaceWithSentry struct {
	domain.ApplicationInterface
	_instance      string
	_spanDecorator func(span *sentry.Span, params, results map[string]interface{})
}

// NewApplicationInterfaceWithSentry returns ApplicationInterfaceWithSentry
func NewApplicationInterfaceWithSentry(base domain.ApplicationInterface, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) ApplicationInterfaceWithSentry {
	d := ApplicationInterfaceWithSentry{
		ApplicationInterface: base,
		_instance:            instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// ProcessRequest implements domain.ApplicationInterface
func (_d ApplicationInterfaceWithSentry) ProcessRequest(ctx context.Context, service string, msg string) (err error) {
	span := sentry.StartSpan(ctx, _d._instance+".domain.ApplicationInterface.ProcessRequest", sentry.WithTransactionName("domain.ApplicationInterface.ProcessRequest"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":     ctx,
			"service": service,
			"msg":     msg}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	return _d.ApplicationInterface.ProcessRequest(ctx, service, msg)
}
