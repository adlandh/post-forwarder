// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

import (
	"context"
	"time"

	_sourceDomain "github.com/adlandh/post-forwarder/internal/post-forwarder/domain"

	helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
	"github.com/getsentry/sentry-go"
)

// MessageStorageWithSentry implements _sourceDomain.MessageStorage interface instrumented with opentracing spans
type MessageStorageWithSentry struct {
	_sourceDomain.MessageStorage
	_spanDecorator func(span *sentry.Span, params, results map[string]interface{})
	_instance      string
}

// NewMessageStorageWithSentry returns MessageStorageWithSentry
func NewMessageStorageWithSentry(base _sourceDomain.MessageStorage, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) MessageStorageWithSentry {
	if instance == "" {
		instance = "notifier"
	}

	d := MessageStorageWithSentry{
		MessageStorage: base,
		_instance:      instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// DecorateMessageStorageWithSentry returns _sourceDomain.MessageStorage with tracing decorators. Useful for uber fx
func DecorateMessageStorageWithSentry(base _sourceDomain.MessageStorage) _sourceDomain.MessageStorage {
	return NewMessageStorageWithSentry(base, "")
}

// Read implements _sourceDomain.MessageStorage
func (_d MessageStorageWithSentry) Read(ctx context.Context, id string) (msg string, createdAt time.Time, err error) {
	span := sentry.StartSpan(ctx, _d._instance+"._sourceDomain.MessageStorage.Read", sentry.WithTransactionName("_sourceDomain.MessageStorage.Read"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx": ctx,
			"id":  id}, map[string]interface{}{
			"msg":       msg,
			"createdAt": createdAt,
			"err":       err})
		span.Finish()
	}()
	return _d.MessageStorage.Read(ctx, id)
}

// Store implements _sourceDomain.MessageStorage
func (_d MessageStorageWithSentry) Store(ctx context.Context, msg string) (id string, err error) {
	span := sentry.StartSpan(ctx, _d._instance+"._sourceDomain.MessageStorage.Store", sentry.WithTransactionName("_sourceDomain.MessageStorage.Store"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx": ctx,
			"msg": msg}, map[string]interface{}{
			"id":  id,
			"err": err})
		span.Finish()
	}()
	return _d.MessageStorage.Store(ctx, msg)
}
