// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/sentry.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

import (
	"context"

	_sourceDomain "github.com/adlandh/post-forwarder/internal/post-forwarder/domain"

	helpers "github.com/adlandh/gowrap-templates/helpers/sentry"
	"github.com/getsentry/sentry-go"
)

// NotifierWithSentry implements _sourceDomain.Notifier interface instrumented with opentracing spans
type NotifierWithSentry struct {
	_sourceDomain.Notifier
	_spanDecorator func(span *sentry.Span, params, results map[string]interface{})
	_instance      string
}

// NewNotifierWithSentry returns NotifierWithSentry
func NewNotifierWithSentry(base _sourceDomain.Notifier, instance string, spanDecorator ...func(span *sentry.Span, params, results map[string]interface{})) NotifierWithSentry {
	if instance == "" {
		instance = "redis"
	}

	d := NotifierWithSentry{
		Notifier:  base,
		_instance: instance,
	}

	if len(spanDecorator) > 0 && spanDecorator[0] != nil {
		d._spanDecorator = spanDecorator[0]
	} else {
		d._spanDecorator = helpers.SpanDecorator
	}

	return d
}

// DecorateNotifierWithSentry returns _sourceDomain.Notifier with tracing decorators. Useful for uber fx
func DecorateNotifierWithSentry(base _sourceDomain.Notifier) _sourceDomain.Notifier {
	return NewNotifierWithSentry(base, "")
}

// Send implements _sourceDomain.Notifier
func (_d NotifierWithSentry) Send(ctx context.Context, service string, msg string) (err error) {
	span := sentry.StartSpan(ctx, _d._instance+"._sourceDomain.Notifier.Send", sentry.WithTransactionName("_sourceDomain.Notifier.Send"))
	ctx = span.Context()

	defer func() {
		_d._spanDecorator(span, map[string]interface{}{
			"ctx":     ctx,
			"service": service,
			"msg":     msg}, map[string]interface{}{
			"err": err})
		span.Finish()
	}()
	return _d.Notifier.Send(ctx, service, msg)
}
