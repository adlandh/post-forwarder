// Code generated by gowrap. DO NOT EDIT.
// template: https://raw.githubusercontent.com/adlandh/gowrap-templates/main/zap.gotmpl
// gowrap: http://github.com/hexdigest/gowrap

package wrappers

//go:generate gowrap gen -p github.com/adlandh/post-forwarder/internal/post-forwarder/domain -i Notifier -t https://raw.githubusercontent.com/adlandh/gowrap-templates/main/zap.gotmpl -o NotifierWithZap.go -l ""

import (
	"context"

	"github.com/adlandh/post-forwarder/internal/post-forwarder/domain"
	"go.uber.org/zap"
)

// NotifierWithZap implements domain.Notifier that is instrumented with zap logger
type NotifierWithZap struct {
	_base domain.Notifier
	_log  *zap.Logger
}

// NewNotifierWithZap instruments an implementation of the domain.Notifier with simple logging
func NewNotifierWithZap(base domain.Notifier, log *zap.Logger) NotifierWithZap {
	return NotifierWithZap{
		_base: base,
		_log:  log,
	}
}

// Send implements domain.Notifier
func (_d NotifierWithZap) Send(ctx context.Context, service string, msg string) (err error) {
	_d._log.Debug("NotifierWithZap: calling Send", zap.Any("params", map[string]interface{}{
		"ctx":     ctx,
		"service": service,
		"msg":     msg}))
	defer func() {
		if err != nil {
			_d._log.Warn("NotifierWithZap: method Send returned an error", zap.Error(err), zap.Any("result", map[string]interface{}{
				"err": err}))
		} else {
			_d._log.Debug("NotifierWithZap: method Send finished", zap.Any("result", map[string]interface{}{
				"err": err}))
		}
	}()
	return _d._base.Send(ctx, service, msg)
}
